<?php
/**
 * This is the template for generating the model class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 */

use yii\helpers\Inflector;
use yii\helpers\StringHelper;

/**
 * @var yii\web\View $this
 * @var schmunk42\giiant\generators\model\Generator $generator
 * @var string $tableName full table name
 * @var string $className class name
 * @var yii\db\TableSchema $tableSchema
 * @var string[] $labels list of attribute labels (name => label)
 * @var string[] $rules list of validation rules
 * @var array $relations list of relations (name => relation declaration)
 *
 * @var $properties array list of properties (property => [type, name. comment])
 * @var $labels string[] list of attribute labels (name => label)
 * @var $rules string[] list of validation rules
 */
/**
 * type User struct {
 *      Id          int    `json:"id"` // int32
 *      Created     int    `json:"created"`
 *      Status      string `json:"status"`
 *      // 依赖Repo
 *      repo TodoRepo `json:"-" form:",omitempty"` // 注释啦
 * }
 */

?>
package domain

import (
"github.com/go-ozzo/ozzo-validation"
)

type <?= $className ?> struct {
  //   Id          int    `json:"id"` // int32

<?php foreach ($properties as $property => $data): ?>
    <?php
    $prop = Inflector::id2camel($property, '_');
    // 描述形式： " `name` VARCHAR(64) NOT NULL "  需要做一下处理
    $xormFieldDescription = trim($data['description']) ;
    $xormFieldDescription = substr($xormFieldDescription,strpos($xormFieldDescription,' '))
    ?>
    <?= "\t {$prop}   {$data['type']}  " . (" `json:\"{$property}\"  `  ") . " // xorm:\" $xormFieldDescription \"  //  " . ($data['comment'] ? ' ' . strtr($data['comment'], ["\n" => ' ']) : '') . "\n" ?>
<?php endforeach; ?>

    // 依赖 Repo  可以用来做一些唯一性检测的验证约束
    // repo <?= $className ?>Repo `json:"-" form:",omitempty"` //
}

// Validate validate  fields of the model <?= $className ?>.
func (m <?= $className ?>) Validate() error {
  <?php if (empty($rules)) : ?>
     return nil
  <?php else :?>
      return validation.ValidateStruct(&m,
            <?php echo  ( implode(",\n            ", $rules) . ",\n        ") ?>
      )
    <?php endif ?>
}

// checkTitleDup 检测重复|唯一性约束条件  集成方法 ：err := validation.Validate("title", validation.By(checkTitleDup))
// 更多详情：https://github.com/go-ozzo/ozzo-validation#creating-custom-rules
func (m Todo) checkTitleDup(value interface{}) error {
    /*
    s, _ := value.(string)

    models, err := m.Repo.Query(nil)

    if len(models) > 0 {
    return errors.New("title duplicated !")
    }
    */
    return nil
}
